generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

generator docs {
  provider              = "node node_modules/prisma-docs-generator"
  output                = "../docs"
  includeRelationFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @unique @default(cuid())
  avatar      String?
  email       String   @unique
  firstname   String
  lastname    String
  username    String   @unique
  phonenumber String?
  password    String
  role        UserRole @default(USER)
  reviews     Review[]
  ratings     Rating[]
  member      Member[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([id, username, email, firstname, lastname, phonenumber])
}

model Organization {
  id               String     @id @unique @default(cuid())
  name             String
  shortDescription String
  fullDescription  String
  director         String     @default("")
  emails           String[]
  phonenumbers     String[]
  locations        String[]
  features         String[]
  logo             String? // Image
  banner           String? // Image
  images           String[]
  categories       Category[]
  tags             Tag[]
  members          Member[]
  reviews          Review[]
  ratings          Rating[]
  metrics          Metrics?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now()) @updatedAt
  Menu             Menu[]

  @@index([id, name])
}

// RELATIONS

model Metrics {
  id             String       @id @unique @default(cuid())
  ratingAverage  Float        @default(0)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique

  @@index([id, organizationId])
}

model Review {
  id             String       @id @unique @default(cuid())
  title          String
  body           String
  images         String[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdUser    User         @relation(fields: [createdUserId], references: [id])
  createdUserId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@index([id, organizationId])
}

model Rating {
  id             String       @id @unique @default(cuid())
  value          Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdUser    User         @relation(fields: [createdUserId], references: [id])
  createdUserId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@index([id, organizationId])
}

model Category {
  id            String         @id @unique @default(cuid())
  icon          String?
  value         String
  organizations Organization[]
  children      Category[]     @relation("children")
  parent        Category?      @relation("children", fields: [parentId], references: [id])
  parentId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt

  @@index([id, value])
}

model Tag {
  id            String         @id @unique @default(cuid())
  icon          String?
  value         String         @unique
  organizations Organization[]
  children      Tag[]          @relation("children")
  parent        Tag?           @relation("children", fields: [parentId], references: [id])
  parentId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt

  @@index([id])
}

model Menu {
  id             String       @id @unique @default(cuid())
  title          String
  description    String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  items          MenuItem[]
}

model MenuItem {
  id          String @id @unique @default(cuid())
  title       String
  description String
  price       Float
  image       String
  menu        Menu   @relation(fields: [menuId], references: [id])
  menuId      String
}

model Member {
  id             String        @id @unique @default(cuid())
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  role           MemberRole    @default(MEMBER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt

  @@index([id, userId, organizationId])
}

enum UserRole {
  USER
  CLIENT
  MODERATOR
  ADMIN
}

enum MemberRole {
  MEMBER
  MODERATOR
  ADMIN
  OWNER
}
